wget --no-check-certificate https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.1.12.tar.xz
wget --no-check-certificate https://www.kernel.org/pub/linux/kernel/projects/rt/4.1/patch-4.1.12-rt13.patch.xz
wget --no-check-certificate http://ftp.slax.org/Slax-7.x-development/sources/Slax-7.0-sources/kernel/.config-x86_64
git clone https://github.com/sfjro/aufs4-standalone.git
cd aufs4-standalone
git checkout origin/aufs4.1
cp -rf ./Documentation ./fs /data/linux-4.1.12
cp include/uapi/linux/aufs_type.h /data/linux-4.1.12/include/uapi/linux/
cd ..

git clone git://git.code.sf.net/p/aufs/aufs-util
cd aufs-util
git checkout origin/aufs4.x-rcN
cd ..

xz -d ./patch

mkdir build

tar -Jxvf linux-4.1.12.tar.xz 
cd linux-4.1.12
patch -p1 < /data/patch-4.1.12-rt13.patch 
patch -p1 < /data/aufs4-standalone/aufs4-kbuild.patch
patch -p1 < /data/aufs4-standalone/aufs4-base.patch
patch -p1 < /data/aufs4-standalone/aufs4-mmap.patch
patch -p1 < /data/aufs4-standalone/aufs4-standalone.patch 
make mrproper
make menuconfig
make -j8 
make bzImage
cp ./arch/x86/boot/bzImage /data/vmlinuz
mkdir /data/kernel-modules
make modules
make modules_install INSTALL_MOD_PATH=/data/kernel-modules
mkdir /data/kernel-headers
make headers_install ARCH=x86_64 INSTALL_HDR_PATH=/data/kernel-headers
cd /data/kernel-headers
mkdir usr
mv ./include ./usr
cp ./usr/include/linux/aufs* /usr/include/linux

cd /data/aufs-util
mkdir /data/aufs-util-pkg


- apply ./aufs4-kbuild.patch to your kernel source files.
- apply ./aufs4-base.patch too.
- apply ./aufs4-mmap.patch too.
- apply ./aufs4-standalone.patch too, if you have a plan to set
  CONFIG_AUFS_FS=m. otherwise you don't need ./aufs4-standalone.patch.
- copy ./{Documentation,fs,include/uapi/linux/aufs_type.h} files to your
  kernel source tree. Never copy $PWD/include/uapi/linux/Kbuild.
- enable CONFIG_AUFS_FS, you can select either
  =m or =y.
- and build your kernel as usual.
- install the built kernel.
  Note: Since linux-3.9, every filesystem module requires an alias
  "fs-<fsname>". You should make sure that "fs-aufs" is listed in your
  modules.aliases file if you set CONFIG_AUFS_FS=m.
- install the header files too by "make headers_install" to the
  directory where you specify. By default, it is $PWD/usr.
  "make help" shows a brief note for headers_install.
- and reboot your system.

2.
- module only (CONFIG_AUFS_FS=m).
- apply ./aufs4-base.patch to your kernel source files.
- apply ./aufs4-mmap.patch too.
- apply ./aufs4-standalone.patch too.
- build your kernel, don't forget "make headers_install", and reboot.
- edit ./config.mk and set other aufs configurations if necessary.
  Note: You should read $PWD/fs/aufs/Kconfig carefully which describes
  every aufs configurations.
- build the module by simple "make".
  Note: Since linux-3.9, every filesystem module requires an alias
  "fs-<fsname>". You should make sure that "fs-aufs" is listed in your
  modules.aliases file.
- you can specify ${KDIR} make variable which points to your kernel
  source tree.
- install the files
  + run "make install" to install the aufs module, or copy the built
    $PWD/aufs.ko to /lib/modules/... and run depmod -a (or reboot simply).
  + run "make install_headers" (instead of headers_install) to install
    the modified aufs header file (you can specify DESTDIR which is
    available in aufs standalone version's Makefile only), or copy
    $PWD/usr/include/linux/aufs_type.h to /usr/include/linux or wherever
    you like manually. By default, the target directory is $PWD/usr.
- no need to apply aufs4-kbuild.patch, nor copying source files to your
  kernel source tree.

Note: The header file aufs_type.h is necessary to build aufs-util
      as well as "make headers_install" in the kernel source tree.
      headers_install is subject to be forgotten, but it is essentially
      necessary, not only for building aufs-util.
      You may not meet problems without headers_install in some older
      version though.

And then,
- read README in aufs-util, build and install it
- note that your distribution may contain an obsoleted version of
  aufs_type.h in /usr/include/linux or something. When you build aufs
  utilities, make sure that your compiler refers the correct aufs header
  file which is built by "make headers_install."
- if you want to use readdir(3) in userspace or pathconf(3) wrapper,
  then run "make install_ulib" too. And refer to the aufs manual in
  detail.

There several other patches in aufs4-standalone.git. They are all
optional. When you meet some problems, they will help you.
- aufs4-loopback.patch
  Supports a nested loopback mount in a branch-fs. This patch is
  unnecessary until aufs produces a message like "you may want to try
  another patch for loopback file".
- vfs-ino.patch
  Modifies a system global kernel internal function get_next_ino() in
  order to stop assigning 0 for an inode-number. Not directly related to
  aufs, but recommended generally.
- tmpfs-idr.patch
  Keeps the tmpfs inode number as the lowest value. Effective to reduce
  the size of aufs XINO files for tmpfs branch. Also it prevents the
  duplication of inode number, which is important for backup tools and
  other utilities. When you find aufs XINO files for tmpfs branch
  growing too much, try this patch.

  =========

Utilities for aufs
http://aufs.sf.net
Junjiro R. Okajima

These utilities are always necessary for aufs.
If you forget to install them, your aufs may not work correctly.
And these are not for aufs1 essentially, except aubrsync. See below in
detail.

You will find GIT branches whose name is in form of "aufs4.x" where "x"
represents the linux kernel version, "linux-4.x". For instance,
"aufs4.0" is for linux-4.0.

You may not be able to find the GIT branch in aufs-util for your
version. In this case, you should git-checkout the branch for the
nearest lower number.
If you are using linux-4.10 and aufs4.10 (which are not released yet),
but the "aufs4.10" branch doesn't exit in this repository, then
"aufs4.9", "aufs4.8", ... or something is the branch for you.
Also you can view all branches by
	$ git branch -a

Note: The 4.x-rcN branch is to be used with `rc' kernel versions ONLY.
The minor version number, 'x' in '4.x', of aufs may not always
follow the minor version number of the kernel.
Because changes in the kernel that cause the use of a new
minor version number do not always require changes to aufs-util.

Makefile in this tree has some customizable make-variables.
- CPPFLAGS
  specify the include path if necessary.
  Some of linux kernel header files are necessary including
  linux/aufs_type.h. If you have installed kernel header files to
  /usr/include, then you may not need to specify CPPFLAGS.
  Otherwise you need to do something like this sample.
  + run "make headers_install" in your kernel source tree, and
    $LinuxSrc/usr/include is created and header files are installed
    there by default.
  + if you build aufs4 as module from aufs4-standalone.git, then
    $AufsStdalone/usr/include is created and header files are
    installed there.
  + and specify
	CPPFLAGS="-I $LinuxSrc/usr/include -I $AufsStdalone/usr/include"
  Note that your distribution may contain an obsoleted version of
  aufs_type.h in /usr/include/linux or something. When you build aufs
  utilities, make sure that your compiler refers the correct aufs header
  file which is built by "make headers_install."

- DESTDIR
  specify your install path if necessary.
  some commands have to be installed under /sbin.

- HOSTCC
  specify the compiler on host side when cross-compiling, otherwise you
  can ignore this make-variable.
  For cross-compiling, use CC for cross-compiler (target side) and HOSTCC
  for native (host side) compiler, since this package requires buiding
  and running some small internal tools.

- MountCmd, UmountCmd
  specify mount(8) and umount(8) in full path. By default, they are
  "/bin/mount" and "/bin/umount" individually.

- BuildFHSM
  specify "yes" if you want FHSM tools or if you enabled
  CONFIG_AUFS_FHSM when you built your aufs kernel module.
  The default is BuildFHSM=no.
	$ make BuildFHSM=yes

o /sbin/mount.aufs, /sbin/umount.aufs
  Helpers for util-linux-ng package. You should NOT invoke them
  manually. Just install them by "make install".

o /sbin/auplink
  Handles aufs pseudo-link at remount/unmount time. You can invoke it
  manually at anytime.

o /sbin/aumvdown
  Operates aufs internal feature "move-down" (opposite of
  "copy-up"). See aumvdown.8 in detail.

o /usr/bin/aubusy
  Prints PIDs which make the branch busy and un-removable.
  It runs /sbin/auibusy internally.

o /usr/bin/auchk
  Similar to generic fsck. Checks whether a branch is healthy or not
  from aufs's point of view.

o /usr/bin/aubrsync
  Move files from the upper writable branch to the lower branch.
  If you use this script with aufs1, then you need to install aufs.shlib
  to /usr/lib/aufs.shlib. Currently only the 20080211 version is tested
  for aufs1.
  The development of this script is sponcered by ASUSTek Computer Inc.
  (http://www.asus.com/).
  Kindly they agreed that I keep my aufs work as free software as it has
  been.

o /etc/default/aufs
  A library for shell scripts.

o /usr/lib/libau.so
  A dynamic link library for "readdir(3) in user-space".
  If you need this , then run "make libau.so install_ulib". And refer to
  the aufs manual in detail.


Contributions
- Michael S. Zick wrote good examples, and made them public at
	http://hg.minimodding.com/repos/aufs/


# Local variables: ;
# mode: text;
# End: ;

1. download and untar Linux, squashfs3.3, aufs
2. make squashfs3.3/squashfs-tools and install them (mksquashfs/unsquashfs) somewhere on the host system
3. "make distclean" the kernel source tree
4. apply the squashfs patch (use patch -Np1 < ...)
5. follow the aufs instructions (copy the fs/ and include/ directories into the Linux source tree and update various config files)
6. configure the kernel (don't forget to include squashfs and aufs, preferably built-in instead of as modules)
7. make the kernel
8. mount the slax iso and copy all the files so you can modify them
9. replace the vmlinuz with your new bzImage
10. take boot/initrd.gz and gunzip it. If you run "file" on it, you can see it is an ext2 filesystem. Mount it somewhere.
11. Remove the old modules in the initrd from lib/modules/xxx/ and install the new ones to this directory (you only need the modules required to boot - I started with Slackware's huge-smp configuration, so I needed only a blank modules.dep in this directory)
12. modify linuxrc to use 'aufs' instead of 'unionfs'
13. in the sample/ folder in the aufs source tree, there is a script called unionctl. Replace bin/unionctl in the initrd with this script.
14. unmount the initrd, recompress it with gzip -9 and put it back in the boot/ directory where it came from.
15. use unsquashfs to extract all the files from base/01_kernel.mo on the cd (the files go into squashfs-root)
16. remove all the kernel modules (lib/modules/xxx/) from the squashfs-root and install the new ones; in the Linux source tree use "make INSTALL_MOD_PATH=xxx modules_install" where xxx is the path of squashfs-root (NOT the path of squashfs-root/lib/modules/xxx/)
17. replace bin/mksquashfs and bin/unsquashfs with the new versions (come to think of it, the squashfs tools you built earlier might be linked against incompatible glibc versions; I was using Slackware so it worked fine for me)
18. delete the old 01_kernel.mo and run mksquashfs squashfs-root <path-to-cd-files>/base/01_kernel.mo
19. use mkisofs to make the new cd image, and hope it works

#!/bin/bash

# This script will update the file ../bootfiles/isolinux.bin to match
# your LiveKit name used in ../.config

PKG=syslinux-4.06
PKGTGZ=$PKG.tar.gz
DL="http://www.kernel.org/pub/linux/utils/boot/syslinux/$PKGTGZ"

. ../.config

# download, unpack, and patch syslinux
wget -c "$DL"
tar -xf $PKGTGZ
rm $PKGTGZ

cd $PKG

sed -i -r "s:/boot/syslinux:/$LIVEKITNAME/boot:" core/fs/iso9660/iso9660.c
sed -i -r "s:/boot/syslinux:/$LIVEKITNAME/boot:" core/fs/lib/loadconfig.c

make -i
cp core/isolinux.bin ../../bootfiles/isolinux.bin

echo
echo "Copying isolinux.bin to $(realpath ../../bootfiles/isolinux.bin)"

cd ..
rm -Rf $PKG
